role role_user {
  privileges User {
    read {
      predicate (doc => 
        doc == Query.identity()
      )
    }
    write {
      predicate ((oldDoc, newDoc) => {
        oldDoc.emails == newDoc.emails &&
        oldDoc.accounts == newDoc.accounts &&
        oldDoc == Query.identity()
      })
    }
  }
  privileges Account {
    read {
      predicate ((doc) => {
        doc.user == Query.identity()
      })
    }
  }

  privileges signOut {
    call
  }
  privileges signOutFromAllDevices {
    call
  }

  privileges getVerificationEmail {
    call {
      predicate (userId => Query.identity()!.id == userId)
    }
  }
  privileges deleteEmailVerification {
    call {
      predicate (email => Query.identity()!.emailVerification == email)
    }
  }
  privileges addEmail {
    call
  }
  privileges deleteEmail {
    call {
      predicate (email => Query.identity()!.emails.includes(email))
    }
  }

  privileges createPasskeyAccount {
    call
  }
  privileges createSocialProviderAccount {
    call
  }
  privileges deleteAccount {
    call {
      predicate (accountId => Account.byId(ID(accountId))?.user == Query.identity())
    }
  }
  privileges deleteUser {
    call {
      predicate (userId => User.byId(ID(userId)) == Query.identity())
    }
  }

  privileges createOrganization {
    call {
      // User can be only part of 5 organizations to avoid organization abuse. 
      // Limit can be lifted if you have a specific use case.
      predicate ((data) => { 
        Query.identity()!.organizations == null || Query.identity()!.organizations.length < 5 
      })
    }
  }

  membership User {
    predicate ( (doc) => isCalledWithAccessToken() )
  }
}
