role role_organization_admin {
  privileges Organization {
    read {
      predicate ((org) => {
        if( Query.identity()!.organizations.includes(org) ) {
          true
        } else {
          false
        }
      })
    }
    write {
      predicate ((old, new) => { 
        // User is only allowed to do actions in his activeOrganization
        if( Query.identity()!.activeOrganization != old) {
          false
        }

        // An admin can't change it's own role or a role of a higher priviliged person.
        let oldOwner = old.members.firstWhere(member => member.role == "role_organization_owner")?.user
        let newOwner = new.members.firstWhere(member => member.role == "role_organization_owner")?.user
        let currentUser = Query.identity()
        let isStillAdmin = new.members.any(member => member.user == currentUser && member.role == "role_organization_admin")

        if( oldOwner != newOwner || !isStillAdmin ) {
          false
        } else {
          true
        }
      })
    }
  }

  privileges getOrganizationMembersAndInvitations {
    call {
      predicate ((organizationId) => {
        // This predicate allows an admin to get the members of their active organization.
        // It checks if the operation is performed within the admin's active organization.
        organizationId == Query.identity()!.activeOrganization!.id   
      })
    }
  }

  privileges removeUserFromOrganization {
    call {
      predicate ((data) => {
        // This predicate allows an admin to leave their active organization or remove another user from the organization,
        // provided the user is not the owner. It checks if the operation is performed within the admin's active organization
        // and ensures that the admin is not attempting to remove the organization owner. 
        let user = Query.identity()

        let activeOrg = user!.activeOrganization
        let owner = activeOrg.members.firstWhere(member => member.user == user && member.role == "role_organization_owner")
        
        if (data.organizationId == activeOrg!.id && data.userId == user!.id) {
          true
        } else if (data.organizationId == activeOrg!.id && data.userId != owner.id) {
          true
        } else {
          false
        }
      })
    }
  }
  privileges revokeInvitation {
    call {
      predicate ((invitationId) => {
        // This predicate allows an admin to revoke invitations to their active organization.
        // It checks if the operation is performed within the admin's active organization.
        Query.identity()!.activeOrganization!.invitations.any(invitation => invitation.id == invitationId)
      })
    }
  }

  privileges createInvitation {
    call {
      predicate ((organizationId) => {
        // This predicate allows an admin to invite members to their active organization.
        // It checks if the operation is performed within the admin's active organization.
        organizationId == Query.identity()!.activeOrganization!.id   
      })
    }
  }

  privileges currentRoles {
    call
  }
  privileges hasRole {
    call
  }
  privileges RoleCheck {
    read {
      predicate ((doc) => doc.name == "role_organization_admin")
    }
  }

  membership User {
    predicate ( (user) => {
      user.activeOrganization!.members.any(member => 
        member.user == user && member.role == "role_organization_admin"
      )
    })
  }
}