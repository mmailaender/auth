/**
 * Removes a user from an organization.
 *
 * If the user is the owner of the organization, the `successorId` must be provided to transfer the ownership to the specified user.
 *
 * @param {object} data - The data object.
 * @param {string} data.userId - The ID of the user that is removed from the organization.
 * @param {string} data.organizationId - The ID of the organization.
 * @param {string} [data.successorId] - The ID of the user that should become the new owner of the organization. Only required if the user is the owner of the organization.
 * @returns {Array<{ user: User, role: String }>} An array of the organization members with their roles after the user has been removed.
 */
@role(server)
function removeUserFromOrganization(data: { userId: ID, organizationId: ID, successorId: ID? }): Array<{ user: User, role: String }> {
  let user = User.byId(data.userId);
  let org = Organization.byId(data.organizationId);
  
  let userOrganizationRole = if (org!.members.any(member => member.user == user && member.role == "role_organization_owner")) {
    "role_organization_owner"
  }

  if (userOrganizationRole == "role_organization_owner") {
    if (data.successorId != null && User.byId(data.successorId!) != null) {
      let successor = User.byId(data.successorId!);
      org!.update({
        members: org!.members.filter(member => 
          member.user != user && 
          member.user != successor
        ).concat([{
          user: successor!,
          role: "role_organization_owner"
        }])
      });

    } else {
      abort("If the owner leaves the organization, a successor is needed.");
    }
  } else {
    org!.update({
      members: org!.members.filter(member => member.user != user)
    });
  }

  let filteredOrgs = user!.organizations!.filter(userOrg => userOrg != org)

  if(user!.activeOrganization == org) {
      user!.update({
        activeOrganization: filteredOrgs.first()
      })
  }

  
  user!.update({
    organizations: filteredOrgs
  }) 

  org!.members! {
    user: .user!,
    role: .role!
  }

}

