@role(server)
function createSocialProviderAccount( accountData: { providerName: "Github" | "Facebook" | "Google", providerUserId: String, providerUserEmail: String }, userData: { firstName: String, lastName: String, email: String, avatar: String? }? ): Account {
  // Check if a user with the provided email already exists
  let user = User.firstWhere((user) => { userData != null && user.emails!.includes(userData!.email) })

  // if user is null, check if the function was called with an access token and if yes assign the user connected with the identiy to the user.
  let identity: Any = Query.identity()
  let user: User | Null = if(user == null) { identity } else { user }
  
  if(user == null) {
    if(userData == null) {
      abort({
        code: "DATA_MISSING",
        message: "The function was called without userData or access token. Please call the function either with userData or with an access token."
      })
    }

    let userId = newId()

    let newAccount = Account.create({
      user: User.byId(userId),
      socialProvider: {
        name: accountData.providerName,
        userId: accountData.providerUserId,
        email: accountData.providerUserEmail
      }
    })
    
    let newUser = User.create({
        id: userId,
        firstName: userData!.firstName,
        lastName: userData!.lastName,
        avatar: userData!.avatar,
        primaryEmail: userData!.email,
        emails: [userData!.email],
        accounts: [newAccount]
    })
    
    newAccount.update({
      user: newUser
    })
    
  } else if (user == Query.identity()){
    // If an user with this email is already existing, the user needs to be signed it to add a new account.
  
    let account = Account.firstWhere(.user == user && .socialProvider?.name == accountData.providerName)

    let account = if(account == null) {
      let account = Account.create({
        user: user!,
        socialProvider: {
          name: accountData.providerName,
          userId: accountData.providerUserId,
          email: accountData.providerUserEmail
        }
      })
      
      let userAccounts = if(user!.accounts != null) {
        user!.accounts!.append(account)
      } else {
        [account]
      }
    
      user!.update({
        accounts: userAccounts 
      })

      account
    } else { 
      account
    }

    account!
  }
else {
    abort({
      code: "USER_ALREADY_EXISTS",
      message: "User already exists. Sign in first to add another Account."
    });
  }
}