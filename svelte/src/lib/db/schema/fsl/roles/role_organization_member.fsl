role role_organization_member {
  privileges Organization {
    read {
      predicate ((org) => {
        if( Query.identity()!.organizations.includes(org) ) {
          true
        } else {
          false
        }
      })
    }
  }

  privileges removeUserFromOrganization {
    call {
      predicate ((data) => {
        // This predicate allows an member to leave their active organization,
        // It checks if the operation is performed within the member's active organization.
        let user = Query.identity()
        let activeOrg = user!.activeOrganization
        
        if (data.organizationId == activeOrg!.id && data.userId == user!.id) {
          true
        } else {
          false
        }
      })
    }
  }

  privileges currentRoles {
    call
  }
  privileges hasRole {
    call
  }
  privileges RoleCheck {
    read {
      predicate ((doc) => doc.name == "role_organization_member")
    }
  }

  membership User {
    predicate ( (user) => {
      user.activeOrganization!.members.any(member => 
        member.user == user && member.role == "role_organization_member"
      )
    })
  }
}